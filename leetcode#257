/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        
        List<String> allPaths = new ArrayList<String>();
        if (root == null){
            return allPaths;
        }
        
        String path = String.valueOf(root.val);
        
        
        if (root.left == null && root.right == null) {
            allPaths.add(path);
            return allPaths;
        }
        
        if (root.left != null) {
            dfs(root.left, path, allPaths);
        }
        
        if (root.right != null) {
            dfs(root.right, path, allPaths);
        }
        
        return allPaths;
        
    
        
        
        
        
    }
    
    public void dfs(TreeNode root, String path, List<String> allPaths) {
        
        path += "->" + String.valueOf(root.val);
        
        if (root.left == null && root.right == null) {
            allPaths.add(path);
            return;
        }
        
        if (root.left != null) {
            dfs(root.left, path, allPaths);
        }
        
        if (root.right != null) {
            dfs(root.right, path, allPaths);
        }
        
        
        
    }
}
